name: Release

permissions:
  contents: write

on:
  push:
    tags:
      - v* 

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  build-release:
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: arch-cli
            asset_name: arch-cli-linux-amd64
            archive_ext: tar.gz
            content_type: application/gzip
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: arch-cli
            asset_name: arch-cli-darwin-amd64
            archive_ext: zip
            content_type: application/zip
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: arch-cli
            asset_name: arch-cli-darwin-arm64
            archive_ext: zip
            content_type: application/zip

    steps:
      - uses: actions/checkout@v4

      # Install OpenSSL for Ubuntu
      - name: Install OpenSSL (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config

      # Install OpenSSL for macOS
      - name: Install OpenSSL (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install openssl@3
          brew unlink pkg-config@0.29.2 || true
          brew install pkg-config
          echo 'export PKG_CONFIG_PATH="/opt/homebrew/opt/openssl@3/lib/pkgconfig"' >> $GITHUB_ENV

      - uses: dtolnay/rust-toolchain@stable
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build target
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}
          use-cross: ${{ matrix.target == 'aarch64-unknown-linux-gnu' }}

      - name: Package
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          if [[ "${{ matrix.archive_ext }}" == "tar.gz" ]]; then
            tar -czf ../../../${{ matrix.asset_name }}.${{ matrix.archive_ext }} ${{ matrix.artifact_name }}
          else
            zip ../../../${{ matrix.asset_name }}.${{ matrix.archive_ext }} ${{ matrix.artifact_name }}
          fi
          cd -

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.asset_name }}.${{ matrix.archive_ext }}
          asset_name: ${{ matrix.asset_name }}.${{ matrix.archive_ext }}
          asset_content_type: ${{ matrix.content_type }}